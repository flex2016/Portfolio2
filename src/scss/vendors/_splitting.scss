.elevate-it {
  perspective: 400px;
  transform-style: preserve-3d;

  .char {
    transition: transform 0.8s cubic-bezier(0.5, 0, 0, 0.9);
    //transition-duration: calc( 0.06s * calc( var(--char-total) ) );
    transition-delay: calc(0.1s * (1 - var(--distance-percent)));
    color: transparent;

    &:before,
    &:after {
      visibility: visible;
    }

    &:before {
      color: $color-primary;
      opacity: 0.85;
      transform: translateY(0%) rotateX(45deg) scale(1, 0);
      //transform: translateY(0%) rotateX(0deg) scale(1,1);
      transform-origin: center 80%;
    }
    &:after {
      color: rgb(0, 0, 0);
    }
  }

  &:hover .char {
    &:before {
      transform: translateY(0%) rotateX(55deg) scale(0.8);
      transform: translateY(0%) rotateX(55deg)
        scale(0.8, calc(0.4 + (0.4 * (1 - var(--distance-percent)))));
    }

    &:after {
      transform: translateY(-20%) rotateX(55deg);
      transform: translateY(-50%)
        translateY(calc(30% * var(--distance-percent))) rotateX(55deg);
    }
  }
}

.splitting {
  cursor: pointer;
}

.spread-out .char {
  transition: transform 1s cubic-bezier(0.8, 0, 0.2, 1);
  transition-delay: calc(0.2s * var(--distance-percent));
}

.spread-out:hover .char {
  transition-delay: calc(0.2s * (1 - var(--distance-percent)));
  transform: scale(0.6) translateX(calc(1.25em * var(--distance-sine)));
}

.pull-in .char {
  transition: transform 1s cubic-bezier(0.8, 0, 0.2, 1);
  transition-delay: calc(0.2s * (1 - var(--distance-percent)));
}
.pull-in:hover .char {
  transition-delay: calc(0.2s * var(--distance-percent));
  transform: scale(0.5) translateX(calc(-1.5em * var(--distance-sine)));
}
.frown-it,
.smile-it {
  .char {
    transition: transform 1s cubic-bezier(0.75, 0, 0.25, 1);
    transition-duration: calc(0.3s + (0.03s * var(--distance-percent)));
  }
}

.frown-it:hover .char {
  transform: translateY(calc(1.2em * var(--distance-percent)))
    rotate(calc(30deg * var(--distance-sine)));
}

.smile-it:hover .char {
  transform: translateY(calc(-1em * var(--distance-percent)))
    rotate(calc(-35deg * var(--distance-sine)));
}

.blur-it {
  .char {
    color: rgba(0, 0, 0, 1);
    transition: opacity 0.2s linear;
    &:before,
    &:after {
      visibility: visible;
      opacity: 0;
    }
  }

  &:hover .char {
    color: rgba(255, 22, 22, 0.5);
    &:before,
    &:after {
      opacity: 0.8;
      animation: blur 0.6s linear infinite alternate;
      animation-delay: calc(-0.2s * var(--distance-percent));
    }

    &:after {
      animation-delay: calc(0.3s + (-0.2s * var(--distance-percent)));
    }
  }
}

@keyframes blur {
  0% {
    transform: translate(-0.1em, 0) scale(0.9) rotate(-2deg);
  }
  50% {
    transform: translate(0, 0) scale(1.1) rotate(0deg);
  }
  100% {
    transform: translate(0.1em, 0) scale(0.9) rotate(2deg);
  }
}

.shift-right {
  &:before {
    content: ">";
    font: inherit;
    vertical-align: 0.1em;
    display: inline-block;
    transform: scaleY(0) translateX(-1em);
    margin-right: -0.25em;
  }

  &:before,
  .char {
    transition: transform 0.8s cubic-bezier(0.75, 0, 0.24, 0.98);
    transition-delay: calc(0.015s * var(--char-index));
  }

  .char {
    transform: translateX(-0.15em);
  }

  &:hover:before {
    transform: scaleY(1) translateX(0em);
  }

  &:hover .char {
    transform: translateX(1em);
    transform: translateX(0.5em) translateX(calc(0.1em * var(--char-index)));
  }
}

.zip-it,
.split-it {
  .char {
    color: $color-primary;
  } //rgba(0,0,0,0.4); }

  .char,
  .char:before,
  .char:after {
    transition: transform 0.8s cubic-bezier(0.75, 0, 0.25, 1);
    transition-delay: calc(0.2s * var(--distance-percent));
  }

  .char:before,
  .char:after {
    visibility: visible;
    color: #000000;
  }

  .char:before {
    clip-path: polygon(0 0, 100% 0, 100% 54%, 0 54%);
  }

  .char:after {
    clip-path: polygon(0 46%, 100% 46%, 100% 100%, 0 100%);
  }

  &:hover .char:before {
    transform: translateY(-45%) scaleY(0);
  }
  &:hover .char:after {
    transform: translateY(45%) scaleY(0);
  }
}

.zip-it {
  .char,
  .char:before,
  .char:after {
    transition-delay: calc(0.5s * (1 - var(--char-percent)));
  }
  &:hover {
    .char,
    .char:before,
    .char:after {
      transition-delay: calc(0.5s * var(--char-percent));
    }
  }
}

.fall-out {
  .char {
    transition: transform 0.5s cubic-bezier(0.86, 0.01, 0.14, 0.98);
    color: transparent;

    &:before,
    &:after {
      visibility: visible;
      color: rgb(0, 0, 0);
      animation-timing-function: cubic-bezier(0.77, 0.02, 0.11, 0.97);
      animation-fill-mode: both;
      animation-delay: calc(0.75s + (0.05s * var(--char-index)));
      animation-duration: 1s;
    }

    &:after {
      animation-delay: calc(0.05s * var(--char-index));
    }
  }

  &:hover .char:before {
    animation-name: fall-in;
  }
  &:hover .char:after {
    animation-name: fall-out;
  }
}

@keyframes fall-in {
  0% {
    transform: translateY(-150%) rotate(-120deg);
    opacity: 0;
  }
  20% {
    opacity: 0;
  }
  100% {
    transform: translateY(0%) rotate(0deg);
    opacity: 1;
  }
}

@keyframes fall-out {
  50% {
    transform: translateY(10%) rotate(15deg);
    transform-origin: bottom left;
    opacity: 1;
  }
  100% {
    transform: translateY(250%) rotate(120deg);
    transform-origin: center center;
    opacity: 0;
  }
}

.run-out {
  width: 100%;
  overflow: hidden;
  pointer-events: none;

  .word {
    pointer-events: auto;
  }

  .char {
    color: transparent;

    &:before,
    &:after {
      visibility: visible;
      color: #000000;
      transition: transform 1.2s cubic-bezier(0.77, 0.02, 0.11, 0.97);
      transition-delay: calc(
        0.04s * var(--char-total) + (0.08s * var(--char-index))
      );
    }

    &:before {
      transform: translateX(-100vw) rotate(-35deg);
      transition-delay: calc(0.04s * var(--char-index));
    }
  }

  &:hover .char {
    &:before {
      transform: translateX(0) rotate(0deg);
      transition-delay: calc(
        0.04s * var(--char-total) +
          (0.08s * (var(--char-total) - var(--char-index)))
      );
    }
    &:after {
      transform: translateX(100vw) rotate(35deg);
      transition-delay: calc((0.04s * (var(--char-total) - var(--char-index))));
    }
  }
}

/* ---------------------------------- */

.wiggle-it {
  &:hover .char {
    transform-origin: center 50%;
    animation: wiggle-char 0.25s linear infinite both;
    animation-delay: calc(-0.02s * var(--char-index));
  }
}

@keyframes wiggle-char {
  0%,
  50%,
  100% {
    transform: rotate(0deg);
  }
  25% {
    transform: rotate(6deg);
  }
  75% {
    transform: rotate(-6deg);
  }
}

/* ---------------------------------- */

.glitch-it {
  .char,
  .char:before,
  .char:after {
    transition: color 0.2s linear;
    animation-duration: 0.6s, 0.4s;

    animation-iteration-count: infinite;
    animation-timing-function: steps(1);
    animation-delay: calc(-0.1s * var(--char-index));
  }

  .char:before,
  .char:after {
    visibility: visible;
    opacity: 0;
    mix-blend-mode: overlay;
    transition-property: opacity;
    animation-name: glitch-anim, glitch-bounce;
    animation-play-state: paused;
  }

  .char:before {
    color: $color-primary;
    animation-delay: calc(-0.02s * var(--char-index));
  }

  .char:after {
    color: $color-black;
    animation-delay: calc(-0.5s * var(--char-index));
  }

  &:hover .char {
    color: rgba(255, 255, 255, 0.7);
    animation-name: glitch-bounce;
  }
  &:hover .char:before,
  &:hover .char:after {
    opacity: 1;
    animation-play-state: running;
  }
}

@keyframes glitch-bounce {
  20% {
    transform: translate(-1%, 0%);
  }
  40% {
    transform: translate(14%, -2%);
  }
  50% {
    transform: translate(-5%, 5%);
  }
  65% {
    transform: translate(1%, -2%);
  }
  80% {
    transform: translate(-3%, 2%);
  }
}

@keyframes glitch-anim {
  0% {
    clip-path: polygon(0 70%, 100% 70%, 100% 75%, 0 75%);
  }
  20% {
    clip-path: polygon(0 10%, 100% 10%, 100% 20%, 0 20%);
  }
  40% {
    clip-path: polygon(0 33%, 100% 33%, 100% 33%, 0 33%);
  }
  60% {
    clip-path: polygon(0 50%, 100% 50%, 100% 20%, 0 20%);
  }
  80% {
    clip-path: polygon(0 80%, 100% 80%, 100% 80%, 0 80%);
  }
  100% {
    clip-path: polygon(0 70%, 100% 70%, 100% 80%, 0 80%);
  }
}

/* ---------------------------------- */
